package cn.com.nttdatabj.h2.uq.ipc;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import com.sun.corba.se.spi.ior.MakeImmutable;
import com.sun.prism.shader.Mask_TextureSuper_Loader;

public class IPCWindow extends JFrame {

	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = 1L;

	/***
	 * Controllers on the panel
	 */
	private JTextField txtNetDec;
	private JTextField txtNetBin;
	private JTextField txtSubDec;
	private JTextField txtSubBin;
	private JTextField txtMinDec;
	private JTextField txtMaxDec;
	private int _subnetMask = 0;
	private int _networkIP = 0;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					IPCWindow frame = new IPCWindow();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public IPCWindow() {
		setResizable(false);
		setTitle("IP電卓");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 420, 260);
		getContentPane().setLayout(null);
		JLabel lblNet = new JLabel("Network Address");
		lblNet.setBounds(7, 5, 100, 20);
		lblNet.setHorizontalAlignment(SwingConstants.LEFT);

		txtNetDec = new JTextField();
		lblNet.setLabelFor(txtNetDec);
		txtNetDec.setBounds(150, 5, 250, 20);
		txtNetDec.setHorizontalAlignment(SwingConstants.LEFT);
		txtNetDec.setColumns(15);
		getContentPane().add(lblNet);
		getContentPane().add(txtNetDec);

		JLabel lblSub = new JLabel("Subnet Mask");
		lblSub.setHorizontalAlignment(SwingConstants.LEFT);
		lblSub.setBounds(7, 65, 100, 20);
		getContentPane().add(lblSub);

		txtSubDec = new JTextField();
		lblSub.setLabelFor(txtSubDec);
		txtSubDec.setHorizontalAlignment(SwingConstants.LEFT);
		txtSubDec.setColumns(15);
		txtSubDec.setBounds(150, 65, 250, 20);
		getContentPane().add(txtSubDec);

		JLabel lblA11 = new JLabel("Dec");
		lblA11.setHorizontalAlignment(SwingConstants.LEFT);
		lblA11.setBounds(110, 5, 30, 20);
		getContentPane().add(lblA11);

		JLabel lblA13 = new JLabel("Bin");
		lblA13.setHorizontalAlignment(SwingConstants.LEFT);
		lblA13.setBounds(110, 35, 30, 20);
		getContentPane().add(lblA13);

		txtNetBin = new JTextField();
		txtNetBin.setEditable(false);
		txtNetBin.setHorizontalAlignment(SwingConstants.LEFT);
		txtNetBin.setColumns(15);
		txtNetBin.setBounds(150, 35, 250, 20);
		getContentPane().add(txtNetBin);

		JLabel label = new JLabel("Bin");
		label.setHorizontalAlignment(SwingConstants.LEFT);
		label.setBounds(110, 95, 30, 20);
		getContentPane().add(label);

		JLabel label_1 = new JLabel("Dec");
		label_1.setHorizontalAlignment(SwingConstants.LEFT);
		label_1.setBounds(110, 65, 30, 20);
		getContentPane().add(label_1);

		txtSubBin = new JTextField();
		txtSubBin.setEditable(false);
		txtSubBin.setHorizontalAlignment(SwingConstants.LEFT);
		txtSubBin.setColumns(15);
		txtSubBin.setBounds(150, 95, 250, 20);
		getContentPane().add(txtSubBin);

		JLabel lblMin = new JLabel("Min IP Address");
		lblMin.setHorizontalAlignment(SwingConstants.LEFT);
		lblMin.setBounds(7, 140, 100, 20);
		getContentPane().add(lblMin);

		JLabel label_3 = new JLabel("Dec");
		label_3.setHorizontalAlignment(SwingConstants.LEFT);
		label_3.setBounds(110, 140, 30, 20);
		getContentPane().add(label_3);

		txtMinDec = new JTextField();
		txtMinDec.setEditable(false);
		txtMinDec.setHorizontalAlignment(SwingConstants.LEFT);
		txtMinDec.setColumns(15);
		txtMinDec.setBounds(150, 140, 250, 20);
		getContentPane().add(txtMinDec);

		JLabel lblMax = new JLabel("Max IP Address");
		lblMax.setHorizontalAlignment(SwingConstants.LEFT);
		lblMax.setBounds(7, 170, 100, 20);
		getContentPane().add(lblMax);

		JLabel label_6 = new JLabel("Dec");
		label_6.setHorizontalAlignment(SwingConstants.LEFT);
		label_6.setBounds(110, 170, 30, 20);
		getContentPane().add(label_6);

		txtMaxDec = new JTextField();
		txtMaxDec.setEditable(false);
		txtMaxDec.setHorizontalAlignment(SwingConstants.LEFT);
		txtMaxDec.setColumns(15);
		txtMaxDec.setBounds(150, 170, 250, 20);
		getContentPane().add(txtMaxDec);

		JButton btnCalc = new JButton("計算");
		btnCalc.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				calculate();
			}
		});
		btnCalc.setBounds(309, 200, 60, 20);
		getContentPane().add(btnCalc);

	}

	private void calculate() {
		_subnetMask = 0;
		_networkIP = 0;

		if (badInput())
			return;

		String tStr = "";
		for (int i = 1, msk = 0x80000000; i <= 32; i++, msk >>= 1) {
			if( i != 1 )
				msk &= 0x7F000000;
			if ((msk & _networkIP) == msk)
				tStr = tStr + "1";
			else
				tStr = tStr + "0";
			if (i % 8 == 0 && i != 32)
				tStr = tStr + ".";
		}
		txtNetBin.setText(tStr);

		tStr = "";
		for (int i = 1, msk = 0x80000000; i <= 32; i++, msk >>= 1) {
			if( i != 1 )
				msk &= 0x7F000000;
			if ((msk & _subnetMask) == msk)
				tStr = tStr + "1";
			else
				tStr = tStr + "0";
			if (i % 8 == 0 && i != 32)
				tStr = tStr + ".";
		}
		txtSubBin.setText(tStr);

		int mn = _networkIP & _subnetMask;
		int mx = _networkIP | (~_subnetMask);

		int s1 = 0, s2 = 0, s3 = 0, s4 = 0;
		s1 = (mn >> 24) & 0x000000FF;
		s2 = (mn >> 16) & 0x000000FF;
		s3 = (mn >> 8) & 0x000000FF;
		s4 = (mn & 0x000000FF);
		txtMinDec.setText(s1 + "." + s2 + "." + s3 + "." + s4);

		s1 = (mx >> 24) & 0x000000FF;
		s2 = (mx >> 16) & 0x000000FF;
		s3 = (mx >> 8) & 0x000000FF;
		s4 = (mx & 0x000000FF);
		txtMaxDec.setText(s1 + "." + s2 + "." + s3 + "." + s4);

	}

	private boolean badInput() {
		return blankValue() || illegalValue();
	}

	private boolean blankValue() {
		return (txtNetDec.getText().trim().isEmpty())
				|| (txtSubDec.getText().trim().isEmpty());
	}

	private boolean illegalValue() {
		String regex = "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$";
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(txtNetDec.getText().trim());
		if (!m.find())
			return true;
		_networkIP = (Integer.parseInt(m.group(1)) << 24)
				| (Integer.parseInt(m.group(2)) << 16)
				| (Integer.parseInt(m.group(3)) << 8)
				| (Integer.parseInt(m.group(4)));

		regex = "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$";
		p = Pattern.compile(regex);
		m = p.matcher(txtSubDec.getText().trim());
		if (m.find()) {
			// XXX: will not available if int doesn't take 4 bytes in the memory
			int mbin = (Integer.parseInt(m.group(1)) << 24)
					| (Integer.parseInt(m.group(2)) << 16)
					| (Integer.parseInt(m.group(3)) << 8)
					| (Integer.parseInt(m.group(4)));
			int msk = 0x80000000;
			boolean nflg = true;
			int bits = 0;
			for (int i = 0; i < 32; i++, msk >>= 1) {
				if ((!nflg) && ((msk & mbin) == msk))
					return true;
				if ((msk & mbin) != msk && nflg) {
					bits = i;
					nflg = false;
				}
			}
			_subnetMask = mbin;
		} else {
			regex = "^(\\d{1,2})$";
			p = Pattern.compile(regex);
			m = p.matcher(txtSubDec.getText().trim());
			if (!m.find())
				return true;
			int bits = Integer.parseInt(txtSubDec.getText().trim());
			if (bits > 32)
				return true;

			for (int msk = 0x80000000; bits > 0; bits--, msk >>= 1) {
				_subnetMask |= msk;
			}
		}

		return false;
	}
}
